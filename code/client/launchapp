#!/usr/bin/python
# encoding: utf-8
#
# Copyright 2010-2016 Greg Neagle.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
"""
launchapp

Created by Greg Neagle on 2010-02-05.
Modified 2010-07-13 to pass all arguments to /usr/bin/open
Launches an app only if we're called in the current
GUI user's session.
Prevents multiple copies of the app from being launched
when Fast User Switching is in use
Intended for use by a launchd LaunchAgent.

Originally written as a generic launching mechanism, it now is tailored to the
specific use-case of launching Managed Software Center.app in the current
GUI user's session, but skipping the launch if the user has enabled Notification
Manager's Do Not Disturb mode or is display mirroring.
"""

import sys
import os
import subprocess
import time

from munkilib import updatecheck

from Quartz import CGGetActiveDisplayList, CGGetOnlineDisplayList
from CoreFoundation import CFPreferencesCopyAppValue


def displayMirroringActive():
    '''Returns True if any two displays are mirroring, False otherwise'''
    # maximum number of displays to return
    max_displays = 100
    # get active display list
    # CGGetActiveDisplayList:
    #     Provides a list of displays that are active (or drawable).
    (err, active_displays, number_of_active_displays) = CGGetActiveDisplayList(
         max_displays, None, None)
    if err:
        return False
    
    # get online display list
    # CGGetOnlineDisplayList:
    #     Provides a list of displays that are online 
    #     (active, mirrored, or sleeping).
    (err, online_displays, number_of_online_displays) = CGGetOnlineDisplayList(
         max_displays, None, None)
    if err:
        return False
    # if one or more displays are mirrored, the number of active displays
    # will be fewer than the number of online displays
    return number_of_active_displays < number_of_online_displays


def dndIsActive():
    '''Returns True if Notification Center's Do Not Disturb is active.'''

    PREFSDOMAIN = 'com.apple.notificationcenterui'
    # first just check if the doNotDisturb preference is set (fails on 10.9)
    doNotDisturb = (CFPreferencesCopyAppValue('doNotDisturb', PREFSDOMAIN) or
                    False)
    if doNotDisturb:
        return True

    # check to see if dndStart and dndStart are defined, and if so, if
    # we are inside the times
    try:
        dndStart = int(CFPreferencesCopyAppValue('dndStart', PREFSDOMAIN))
        dndEnd = int(CFPreferencesCopyAppValue('dndEnd', PREFSDOMAIN))
    except TypeError:
        dndStart = None
        dndEnd = None
    if dndStart and dndEnd:
        current_time = time.localtime()
        minutes_since_midnight = current_time.tm_hour * 60 + current_time.tm_min
        if dndStart < dndEnd:
            if dndStart <= minutes_since_midnight < dndEnd:
                return True
        else:
            if ((minutes_since_midnight < dndEnd) or
                (minutes_since_midnight >= dndStart)):
                return True

    # if dndMirroring is not explicitly False, if we are mirroring, return True
    if CFPreferencesCopyAppValue('dndMirroring', PREFSDOMAIN) is not False:
        return displayMirroringActive()


def getconsoleuser():
    '''Uses Apple's SystemConfiguration framework to get the current
    console user'''
    from SystemConfiguration import SCDynamicStoreCopyConsoleUser
    cfuser = SCDynamicStoreCopyConsoleUser( None, None, None )
    return cfuser[0]


def main():
    '''Pass arguments to /usr/bin/open only if we are the current
    console user or no user and we're at the login window'''
    consoleuser = getconsoleuser()
    try:
        thisuser = os.environ['USER']
    except KeyError:
        # when run via launchd at loginwindow context, os.environ['USER']
        # is undefined, so we'll return root (the effective user)
        thisuser = "root"

    if (consoleuser == thisuser) or \
        (consoleuser == None and thisuser == "root"):
        if consoleuser != "root":
            dndActive = dndIsActive()
            updatesToBeForcedSoon = (
                updatecheck.checkForceInstallPackages() is not None)
            if dndActive and not updatesToBeForcedSoon:
                print ("Not launching the app because Do Not Disturb is active "
                       "and there are no updates to be forced soon.")
                time.sleep(10)
                exit(0)

        cmd = ["/usr/bin/open"]
        if len(sys.argv) > 1:
            cmd.extend(sys.argv[1:])
        else:
            print >> sys.stderr, "Must specify an app to launch!"
            exit(-1)
        retcode = subprocess.call(cmd)
        # sleep 10 secs to make launchd happy
        time.sleep(10)
        exit(retcode)
    else:
        # we aren't in the current GUI session
        # sleep 10 secs to make launchd happy
        time.sleep(10)
        exit(0)


if __name__ == '__main__':
    main()

